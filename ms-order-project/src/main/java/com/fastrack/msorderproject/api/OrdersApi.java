/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.18).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.fastrack.msorderproject.api;

import com.fastrack.msorderproject.models.ExceptionResponse;
import com.fastrack.msorderproject.models.OrderDto;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-01-18T19:07:12.011660-03:00[America/Sao_Paulo]")
@Api(value = "orders", description = "the orders API")
public interface OrdersApi {

    @ApiOperation(value = "create", nickname = "createUsingPOST", notes = "", tags={ "order-rest", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 201, message = "Created", response = OrderDto.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ExceptionResponse.class),
        @ApiResponse(code = 403, message = "Forbidden", response = ExceptionResponse.class),
        @ApiResponse(code = 404, message = "Not Found", response = ExceptionResponse.class) })
    @RequestMapping(value = "/orders",
        produces = { "*/*" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> createUsingPOST(@ApiParam(value = "dto" ,required=true )  @Valid @RequestBody OrderDto body
);


    @ApiOperation(value = "delete", nickname = "deleteUsingDELETE", notes = "", response = OrderDto.class, tags={ "order-rest", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = OrderDto.class),
        @ApiResponse(code = 204, message = "No Content", response = ExceptionResponse.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ExceptionResponse.class),
        @ApiResponse(code = 403, message = "Forbidden", response = ExceptionResponse.class) })
    @RequestMapping(value = "/orders/{id}",
        produces = { "*/*" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<OrderDto> deleteUsingDELETE(@ApiParam(value = "id",required=true) @PathVariable("id") Long id
);


    @ApiOperation(value = "findById", nickname = "findByIdUsingGET", notes = "", response = OrderDto.class, tags={ "order-rest", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = OrderDto.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ExceptionResponse.class),
        @ApiResponse(code = 403, message = "Forbidden", response = ExceptionResponse.class),
        @ApiResponse(code = 404, message = "Not Found", response = ExceptionResponse.class) })
    @RequestMapping(value = "/orders/{id}",
        produces = { "*/*" }, 
        method = RequestMethod.GET)
    ResponseEntity<OrderDto> findByIdUsingGET(@ApiParam(value = "id",required=true) @PathVariable("id") Long id
);


    @ApiOperation(value = "list", nickname = "listUsingGET", notes = "", response = OrderDto.class, responseContainer = "List", tags={ "order-rest", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = OrderDto.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad Request", response = ExceptionResponse.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ExceptionResponse.class),
        @ApiResponse(code = 403, message = "Forbidden", response = ExceptionResponse.class),
        @ApiResponse(code = 404, message = "Not Found", response = ExceptionResponse.class) })
    @RequestMapping(value = "/orders",
        produces = { "*/*" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<OrderDto>> listUsingGET();


    @ApiOperation(value = "search", nickname = "searchUsingGET", notes = "", response = OrderDto.class, responseContainer = "List", tags={ "order-rest", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = OrderDto.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized", response = ExceptionResponse.class),
        @ApiResponse(code = 403, message = "Forbidden", response = ExceptionResponse.class),
        @ApiResponse(code = 404, message = "Not Found", response = ExceptionResponse.class) })
    @RequestMapping(value = "/orders/search",
        produces = { "*/*" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<OrderDto>> searchUsingGET(@ApiParam(value = "") @Valid @RequestParam(value = "max_total", required = false) String maxTotal
,@ApiParam(value = "") @Valid @RequestParam(value = "min_total", required = false) String minTotal
,@ApiParam(value = "") @Valid @RequestParam(value = "status", required = false) String status
,@ApiParam(value = "") @Valid @RequestParam(value = "q", required = false) String q
);


    @ApiOperation(value = "update", nickname = "updateUsingPUT", notes = "", response = OrderDto.class, tags={ "order-rest", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = OrderDto.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 400, message = "Bad Request", response = ExceptionResponse.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ExceptionResponse.class),
        @ApiResponse(code = 403, message = "Forbidden", response = ExceptionResponse.class),
        @ApiResponse(code = 404, message = "Not Found", response = ExceptionResponse.class) })
    @RequestMapping(value = "/orders/{id}",
        produces = { "*/*" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<OrderDto> updateUsingPUT(@ApiParam(value = "dto" ,required=true )  @Valid @RequestBody OrderDto body
,@ApiParam(value = "id",required=true) @PathVariable("id") Long id
);

}
